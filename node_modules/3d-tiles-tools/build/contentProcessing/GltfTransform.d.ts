/// <reference types="node" />
import { Transform } from "@gltf-transform/core";
import { NodeIO } from "@gltf-transform/core";
/**
 * Utilities for using glTF-Transform in the 3D Tiles tools
 *
 * @internal
 */
export declare class GltfTransform {
    /**
     * The `gltf-transform` IO handler, intialized lazily and cached
     * in `getIO`.
     */
    private static io;
    /**
     * Returns the `gltf-transform` `NodeIO` instance, preconfigured
     * for the use in the 3D Tiles Tools.
     *
     * (E.g. it will be configured to handle the all extensions that
     * are known in glTF-Transform, as well as EXT_mesh_features and
     * EXT_structural_metadata, and have draco- and meshopt
     * encoders/decoders)
     *
     * @returns - The `NodeIO` instance
     */
    static getIO(): Promise<NodeIO>;
    /**
     * Calls `gltf-transform` on a GLB buffer and returns the transformed
     * buffer.
     *
     * It will read the GLB data, apply the `transform` call to the
     * resulting `Document` (using the given `Transform` instances),
     * and return a GLB buffer that was crated from the transformed
     * document.
     *
     * @param transforms - The `gltf-transform` `Transform` instances
     * @returns The function
     */
    static process(inputGlb: Buffer, ...transforms: Transform[]): Promise<Buffer>;
}
//# sourceMappingURL=GltfTransform.d.ts.map