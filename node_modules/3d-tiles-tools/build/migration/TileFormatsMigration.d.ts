/// <reference types="node" />
import { Document } from "@gltf-transform/core";
/**
 * Methods for converting "legacy" tile formats into glTF assets
 * that use metadata extensions to represent the information from
 * the legacy formats.
 *
 * @internal
 */
export declare class TileFormatsMigration {
    static readonly DEBUG_LOG_FILE_CONTENT = false;
    /**
     * Convert the given PNTS data into a glTF asset
     *
     * @param pntsBuffer - The PNTS buffer
     * @returns The GLB buffer
     */
    static convertPntsToGlb(pntsBuffer: Buffer): Promise<Buffer>;
    /**
     * Convert the given B3DM data into a glTF asset
     *
     * @param b3dmBuffer - The B3DM buffer
     * @returns The GLB buffer
     */
    static convertB3dmToGlb(b3dmBuffer: Buffer): Promise<Buffer>;
    /**
     * Convert the given I3DM data into a glTF asset
     *
     * @param i3dmBuffer - The I3DM buffer
     * @param externalGlbResolver - A function that will be used to resolve
     * external GLB data if the I3DM uses `header.gltfFormat=0` (meaning
     * that the payload is not GLB data, but only a GLB URI).
     * @returns The GLB buffer
     */
    static convertI3dmToGlb(i3dmBuffer: Buffer, externalGlbResolver: (uri: string) => Promise<Buffer | undefined>): Promise<Buffer>;
    /**
     * Apply the given RTC_CENTER to the given glTF-Transform document,
     * by inserting a new root node that carries the given RTC_CENTER
     * as its translation, taking into account the y-up-vs-z-up
     * transform.
     *
     * @param document - The glTF-Transform document
     * @param rtcCenter - The RTC_CENTER
     */
    static applyRtcCenter(document: Document, rtcCenter: number[]): void;
    /**
     * Make sure that each scene in the given document has a single
     * root node. If there is a scene that contains multiple nodes
     * directly, then remove these nodes and insert a new root
     * that has the former scene nodes as its chilldren.
     *
     * @param document - The glTF-Transform document
     */
    static makeSingleRoot(document: Document): void;
}
//# sourceMappingURL=TileFormatsMigration.d.ts.map