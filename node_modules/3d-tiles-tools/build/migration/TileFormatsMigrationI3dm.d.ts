/// <reference types="node" />
/**
 * Methods for converting I3DM tile data into GLB
 *
 * @internal
 */
export declare class TileFormatsMigrationI3dm {
    /**
     * Convert the given I3DM data into a glTF asset
     *
     * @param i3dmBuffer - The I3DM buffer
     * @param externalGlbResolver - A function that will be used to resolve
     * external GLB data if the I3DM uses `header.gltfFormat=0` (meaning
     * that the payload is not GLB data, but only a GLB URI).
     * @returns The GLB buffer
     * @throws TileFormatError If the I3DM contained an external GLB URI
     * that could not resolved by the given resolver
     */
    static convertI3dmToGlb(i3dmBuffer: Buffer, externalGlbResolver: (uri: string) => Promise<Buffer | undefined>): Promise<Buffer>;
}
//# sourceMappingURL=TileFormatsMigrationI3dm.d.ts.map