import { TilesetProcessorContext } from "./TilesetProcessorContext";
/**
 * A class summarizing the data that a `TilesetProcessor` is operating on.
 *
 * This is initialized during the `TilesetProcessor.begin` call, if all
 * the source- and target information could be resolved, and is supposed
 * to represent a consistent, properly initialized state to work on.
 *
 * @internal
 */
export declare class TilesetProcessorContexts {
    /**
     * Creates a `TilesetProcessorContext` for the given source- and
     * target name.
     *
     * This will open the source and target, and collect the required
     * information for creating a valid, consistent
     * `TilesetProcessorContext`.
     *
     * @param tilesetSourceName - The tileset source name
     * @param tilesetTargetName - The tileset target name
     * @param overwrite - Whether the target should be overwritten if
     * it already exists
     * @returns A promise that resolves when this processor has been
     * initialized
     * @throws TilesetError When the input could not be opened,
     * or when the output already exists and `overwrite` was `false`.
     */
    static create(tilesetSourceName: string, tilesetTargetName: string, overwrite: boolean): Promise<TilesetProcessorContext>;
    /**
     * Close the source and the target that are contained in the given
     * context.
     *
     * @param context - The context
     * @throws TilesetError If closing caused an error
     */
    static close(context: TilesetProcessorContext): Promise<void>;
    /**
     * Determine the name of the file that contains the tileset JSON data.
     *
     * If the given name ends with '.json' (case insensitively), then the
     * name is the last path component of the given name.
     *
     * Otherwise (if the given name is a directory, or the name of a file
     * that does not end with '.json' - for example, an archive file
     * that ends with `.3tz` or `.3dtiles`), then the default name
     * 'tileset.json' is returned.
     *
     * @param tilesetDataName - The name of the tileset data
     * @returns The tileset file name
     */
    private static determineTilesetJsonFileName;
}
//# sourceMappingURL=TilesetProcessorContexts.d.ts.map